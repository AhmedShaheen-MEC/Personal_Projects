
Rain_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000630  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000748  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  64:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <vLDR_RAIN_Init>:
#include "LDR_RAIN_Config.h"
#include "LDR_RAIN_Driver.h"


void vLDR_RAIN_Init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	LDR_REG_DIR |= (INPUT_STATUS<<LDR_PIN);
  74:	a1 e3       	ldi	r26, 0x31	; 49
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e1 e3       	ldi	r30, 0x31	; 49
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8c 93       	st	X, r24
	TxLIGHT_REG_DIR |= (OUTPUT_STATUS<<TxLIGHT_PIN);
  80:	a1 e3       	ldi	r26, 0x31	; 49
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e1 e3       	ldi	r30, 0x31	; 49
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	80 61       	ori	r24, 0x10	; 16
  8c:	8c 93       	st	X, r24
	TxRAIN_REG_DIR |= (OUTPUT_STATUS<<TxRAIN_PIN);
  8e:	a1 e3       	ldi	r26, 0x31	; 49
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	e1 e3       	ldi	r30, 0x31	; 49
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	8c 93       	st	X, r24
	TxLIGHT_DATA_OUTPUT &= ~(OUTPUT_STATUS<<TxLIGHT_PIN);
  9c:	a2 e3       	ldi	r26, 0x32	; 50
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	e2 e3       	ldi	r30, 0x32	; 50
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	8c 93       	st	X, r24
	TxRAIN_DATA_OUTPUT &= ~(OUTPUT_STATUS<<TxRAIN_PIN);
  aa:	a2 e3       	ldi	r26, 0x32	; 50
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e2 e3       	ldi	r30, 0x32	; 50
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	8c 93       	st	X, r24
	setUpADC();
  b8:	0e 94 92 00 	call	0x124	; 0x124 <setUpADC>
}
  bc:	cf 91       	pop	r28
  be:	df 91       	pop	r29
  c0:	08 95       	ret

000000c2 <vCheckLight>:

void vCheckLight(void)
{
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	if (LDR_INPUT_DATA & (OUTPUT_STATUS<<LDR_PIN))
  ca:	e0 e3       	ldi	r30, 0x30	; 48
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	81 70       	andi	r24, 0x01	; 1
  d6:	90 70       	andi	r25, 0x00	; 0
  d8:	88 23       	and	r24, r24
  da:	41 f0       	breq	.+16     	; 0xec <vCheckLight+0x2a>
	{
		TxLIGHT_DATA_OUTPUT |= (OUTPUT_STATUS<<TxLIGHT_PIN);
  dc:	a2 e3       	ldi	r26, 0x32	; 50
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e2 e3       	ldi	r30, 0x32	; 50
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	8c 93       	st	X, r24
  ea:	07 c0       	rjmp	.+14     	; 0xfa <vCheckLight+0x38>
	}
	else
	{
		TxLIGHT_DATA_OUTPUT &= ~(OUTPUT_STATUS<<TxLIGHT_PIN);
  ec:	a2 e3       	ldi	r26, 0x32	; 50
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e2 e3       	ldi	r30, 0x32	; 50
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	8f 7e       	andi	r24, 0xEF	; 239
  f8:	8c 93       	st	X, r24
	}
}
  fa:	cf 91       	pop	r28
  fc:	df 91       	pop	r29
  fe:	08 95       	ret

00000100 <vCheckRain>:

uint16_t vCheckRain()
{
 100:	df 93       	push	r29
 102:	cf 93       	push	r28
 104:	00 d0       	rcall	.+0      	; 0x106 <vCheckRain+0x6>
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
	uint16_t result=0;
 10a:	1a 82       	std	Y+2, r1	; 0x02
 10c:	19 82       	std	Y+1, r1	; 0x01
	result = readADC();
 10e:	0e 94 b2 00 	call	0x164	; 0x164 <readADC>
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	89 83       	std	Y+1, r24	; 0x01
	return result;
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	9a 81       	ldd	r25, Y+2	; 0x02
}
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <setUpADC>:


void setUpADC()
{
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	ADMUX &= (1 << REFS0);
 12c:	a7 e2       	ldi	r26, 0x27	; 39
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e7 e2       	ldi	r30, 0x27	; 39
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 74       	andi	r24, 0x40	; 64
 138:	8c 93       	st	X, r24
	ADCSRA = (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1 <<ADPS0 ); // to enable interrupt (1<< ADIE);, 	Division FACTOR =128
 13a:	e6 e2       	ldi	r30, 0x26	; 38
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	87 e8       	ldi	r24, 0x87	; 135
 140:	80 83       	st	Z, r24

}
 142:	cf 91       	pop	r28
 144:	df 91       	pop	r29
 146:	08 95       	ret

00000148 <startConversion>:

void startConversion(){
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADSC);
 150:	a6 e2       	ldi	r26, 0x26	; 38
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	e6 e2       	ldi	r30, 0x26	; 38
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	8c 93       	st	X, r24
}
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <readADC>:

uint16_t readADC()
{
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
//	ADMUX &= 0xF0
//	ADMUX |= channel;
	startConversion();
 16c:	0e 94 a4 00 	call	0x148	; 0x148 <startConversion>
	while(ADCSRA & (1 << ADSC));
 170:	e6 e2       	ldi	r30, 0x26	; 38
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 74       	andi	r24, 0x40	; 64
 17c:	90 70       	andi	r25, 0x00	; 0
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	b9 f7       	brne	.-18     	; 0x170 <readADC+0xc>
	return  ADC;
 182:	e4 e2       	ldi	r30, 0x24	; 36
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	91 81       	ldd	r25, Z+1	; 0x01

}
 18a:	cf 91       	pop	r28
 18c:	df 91       	pop	r29
 18e:	08 95       	ret

00000190 <main>:
#include "LDR_RAIN_Config.h"
#include "LDR_RAIN_Driver.h"


int main(void)
{
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
	vLDR_RAIN_Init();
 198:	0e 94 36 00 	call	0x6c	; 0x6c <vLDR_RAIN_Init>

	while(1)
	{

		// LDR part
		vCheckLight();
 19c:	0e 94 61 00 	call	0xc2	; 0xc2 <vCheckLight>
		// ADC part
		if(vCheckRain() >= 500)
 1a0:	0e 94 80 00 	call	0x100	; 0x100 <vCheckRain>
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	84 3f       	cpi	r24, 0xF4	; 244
 1a8:	92 07       	cpc	r25, r18
 1aa:	40 f0       	brcs	.+16     	; 0x1bc <main+0x2c>
		{
			TxRAIN_DATA_OUTPUT |= (OUTPUT_STATUS << TxRAIN_PIN);
 1ac:	a2 e3       	ldi	r26, 0x32	; 50
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e2 e3       	ldi	r30, 0x32	; 50
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	8c 93       	st	X, r24
 1ba:	f0 cf       	rjmp	.-32     	; 0x19c <main+0xc>
		}
		else
		{
			TxRAIN_DATA_OUTPUT &= (OUTPUT_STATUS<<TxRAIN_PIN);
 1bc:	a2 e3       	ldi	r26, 0x32	; 50
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	e2 e3       	ldi	r30, 0x32	; 50
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	88 70       	andi	r24, 0x08	; 8
 1c8:	8c 93       	st	X, r24
 1ca:	e8 cf       	rjmp	.-48     	; 0x19c <main+0xc>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
