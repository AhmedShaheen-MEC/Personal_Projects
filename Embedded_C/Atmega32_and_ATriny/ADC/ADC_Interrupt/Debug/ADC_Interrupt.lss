
ADC_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003f0  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006cd  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_14>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/interrupt.h>


int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

	ADMUX = 0x00;
  74:	e7 e2       	ldi	r30, 0x27	; 39
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	//Channel:
	ADMUX |= (1<<REFS1);
  7a:	a7 e2       	ldi	r26, 0x27	; 39
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e7 e2       	ldi	r30, 0x27	; 39
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	80 68       	ori	r24, 0x80	; 128
  86:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS0);
  88:	a7 e2       	ldi	r26, 0x27	; 39
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e7 e2       	ldi	r30, 0x27	; 39
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8f 7b       	andi	r24, 0xBF	; 191
  94:	8c 93       	st	X, r24
	sei();
  96:	78 94       	sei
	// Clock prescaller
	ADCSRA |= (1<<ADPS0) | (1<< ADPS1) | (1<<ADPS2);
  98:	a6 e2       	ldi	r26, 0x26	; 38
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e6 e2       	ldi	r30, 0x26	; 38
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	87 60       	ori	r24, 0x07	; 7
  a4:	8c 93       	st	X, r24
	// Interrupt :
	ADCSRA |= (1<< ADIE);
  a6:	a6 e2       	ldi	r26, 0x26	; 38
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e6 e2       	ldi	r30, 0x26	; 38
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	8c 93       	st	X, r24
	// Single conversion:
	ADCSRA |= (1<<ADEN);
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e6 e2       	ldi	r30, 0x26	; 38
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC); // Start conversion at the beginning
  c2:	a6 e2       	ldi	r26, 0x26	; 38
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e6 e2       	ldi	r30, 0x26	; 38
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	8c 93       	st	X, r24
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0





}
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <__vector_14>:


ISR (ADC_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	00 d0       	rcall	.+0      	; 0xfa <__vector_14+0x20>
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	uint16_t ADC_Reading=0;
  fe:	1a 82       	std	Y+2, r1	; 0x02
 100:	19 82       	std	Y+1, r1	; 0x01
	ADC_Reading = ADCL;
 102:	e4 e2       	ldi	r30, 0x24	; 36
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 2f       	mov	r24, r24
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	9a 83       	std	Y+2, r25	; 0x02
 10e:	89 83       	std	Y+1, r24	; 0x01
	ADC_Reading |= (uint16_t) (ADCH);
 110:	e5 e2       	ldi	r30, 0x25	; 37
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	28 2f       	mov	r18, r24
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	82 2b       	or	r24, r18
 120:	93 2b       	or	r25, r19
 122:	9a 83       	std	Y+2, r25	; 0x02
 124:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA |= (1<<ADSC); // Whenever the ADC interrupt catch something start conversion.
 126:	a6 e2       	ldi	r26, 0x26	; 38
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e6 e2       	ldi	r30, 0x26	; 38
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	8c 93       	st	X, r24


}
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
